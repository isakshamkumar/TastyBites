{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ksaks\\\\OneDrive\\\\Desktop\\\\react_udemy\\\\after-side-effects-food-order-app\\\\src\\\\Components\\\\Meals\\\\AvailableMeals.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport classes from './AvailableMeals.module.css';\nimport Card from '../UI/Card';\nimport MealItem from './MealItem/MealItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AvailableMeals() {\n  _s();\n  const [meals, setmeals] = useState([]);\n  const [isloading, setisloading] = useState(true);\n  const [iserror, setiserror] = useState(null);\n  // const DUMMY_MEALS = [//note ye dummy meals me id is necessay coz here every object will map to a list item which shoul be unique and hence should has the id\n  //     {\n  //       id: 'm1',\n  //       name: 'Sushi',\n  //       description: 'Finest fish and veggies',\n  //       price: 22.99,\n  //     },\n  //     {\n  //       id: 'm2',\n  //       name: 'Schnitzel',\n  //       description: 'A german specialty!',\n  //       price: 16.5,\n  //     },\n  //     {\n  //       id: 'm3',\n  //       name: 'Barbecue Burger',\n  //       description: 'American, raw, meaty',\n  //       price: 12.99,\n  //     },\n  //     {\n  //       id: 'm4',\n  //       name: 'Green Bowl',\n  //       description: 'Healthy...and green...',\n  //       price: 18.99,\n  //     },\n  //   ];\n  //   const mealsList =DUMMY_MEALS.map(meal => <li>{meal.name}</li>)\n\n  useEffect(() => {\n    const fetchMeals = async () => {\n      try {\n        const response = await fetch('https://hooksss-c4d70-default-rtdb.firebaseio.com/meals.json');\n        if (!response.ok) {\n          throw new Error(\"Something went wrong\");\n        }\n        const responseData = await response.json();\n        // console.log(responseData)\n        //we get back a object in response data with differenct keys(m1,m2..)and their values as nested object with the properties\n        const loadedMeals = [];\n        for (const key in responseData) {\n          //coz we want array of objects\n          loadedMeals.push({\n            id: key,\n            name: responseData[key].name,\n            description: responseData[key].description,\n            price: responseData[key].price\n          });\n        }\n        setmeals(loadedMeals);\n        setisloading(false);\n      } catch (error) {\n        alert('hi');\n        setisloading(false);\n        setiserror(error.message);\n      }\n    };\n    fetchMeals();\n  }, []);\n  if (iserror) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.MealsError,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: iserror\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this);\n  }\n  //another way of conditional rendering..the code below if will not run until the data is fetched\n  if (isloading) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.MealsLoading,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this);\n  }\n  const mealsList = meals.map(meal => /*#__PURE__*/_jsxDEV(MealItem, {\n    id: meal.id,\n    name: meal.name,\n    description: meal.description,\n    price: meal.price\n  }, meal.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 39\n  }, this));\n  //now this approach was temporar coz we gonna create a separate meal item componenet in a new folder coz there we wil have meal item and a form to add new meal to cart so further 2 componenets\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.meals,\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: mealsList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n_s(AvailableMeals, \"b7wZBLI98vtjf/Inul/nqjwQvpo=\");\n_c = AvailableMeals;\nexport default AvailableMeals;\nvar _c;\n$RefreshReg$(_c, \"AvailableMeals\");","map":{"version":3,"names":["React","useEffect","useState","classes","Card","MealItem","jsxDEV","_jsxDEV","AvailableMeals","_s","meals","setmeals","isloading","setisloading","iserror","setiserror","fetchMeals","response","fetch","ok","Error","responseData","json","loadedMeals","key","push","id","name","description","price","error","alert","message","className","MealsError","children","fileName","_jsxFileName","lineNumber","columnNumber","MealsLoading","mealsList","map","meal","_c","$RefreshReg$"],"sources":["C:/Users/ksaks/OneDrive/Desktop/react_udemy/after-side-effects-food-order-app/src/Components/Meals/AvailableMeals.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport classes from './AvailableMeals.module.css'\r\nimport Card from '../UI/Card';\r\nimport MealItem from './MealItem/MealItem';\r\n\r\nfunction AvailableMeals() {\r\n  const [meals, setmeals] = useState([])\r\n  const [isloading, setisloading] = useState(true);\r\n  const [iserror, setiserror] = useState(null)\r\n  // const DUMMY_MEALS = [//note ye dummy meals me id is necessay coz here every object will map to a list item which shoul be unique and hence should has the id\r\n  //     {\r\n  //       id: 'm1',\r\n  //       name: 'Sushi',\r\n  //       description: 'Finest fish and veggies',\r\n  //       price: 22.99,\r\n  //     },\r\n  //     {\r\n  //       id: 'm2',\r\n  //       name: 'Schnitzel',\r\n  //       description: 'A german specialty!',\r\n  //       price: 16.5,\r\n  //     },\r\n  //     {\r\n  //       id: 'm3',\r\n  //       name: 'Barbecue Burger',\r\n  //       description: 'American, raw, meaty',\r\n  //       price: 12.99,\r\n  //     },\r\n  //     {\r\n  //       id: 'm4',\r\n  //       name: 'Green Bowl',\r\n  //       description: 'Healthy...and green...',\r\n  //       price: 18.99,\r\n  //     },\r\n  //   ];\r\n  //   const mealsList =DUMMY_MEALS.map(meal => <li>{meal.name}</li>)\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchMeals = async () => {\r\n      try {\r\n\r\n        const response = await fetch('https://hooksss-c4d70-default-rtdb.firebaseio.com/meals.json')\r\n        if (!response.ok) {\r\n          throw new Error(\"Something went wrong\")\r\n        }\r\n        const responseData = await response.json()\r\n        // console.log(responseData)\r\n        //we get back a object in response data with differenct keys(m1,m2..)and their values as nested object with the properties\r\n        const loadedMeals = [];\r\n        for (const key in responseData) {\r\n          //coz we want array of objects\r\n          loadedMeals.push({\r\n            id: key,\r\n            name: responseData[key].name,\r\n            description: responseData[key].description,\r\n            price: responseData[key].price,\r\n\r\n          })\r\n        }\r\n        setmeals(loadedMeals)\r\n        setisloading(false)\r\n      }\r\n      catch (error) {\r\n        alert('hi')\r\n        setisloading(false)\r\n        setiserror(error.message)\r\n\r\n      }\r\n\r\n    }\r\n    fetchMeals()\r\n  }, [])\r\n\r\n  if (iserror) {\r\n    return (\r\n      <section className={classes.MealsError}>\r\n        <p>{iserror}</p>\r\n      </section>\r\n    )\r\n  }\r\n  //another way of conditional rendering..the code below if will not run until the data is fetched\r\n  if (isloading) {\r\n    return (\r\n      <section className={classes.MealsLoading}>\r\n        <p>Loading...</p>\r\n      </section>\r\n    )\r\n  }\r\n\r\n  const mealsList = meals.map(meal => <MealItem\r\n    id={meal.id} key={meal.id} name={meal.name} description={meal.description} price={meal.price} />)\r\n  //now this approach was temporar coz we gonna create a separate meal item componenet in a new folder coz there we wil have meal item and a form to add new meal to cart so further 2 componenets\r\n  return (\r\n    <section className={classes.meals}>\r\n      <Card>\r\n        <ul>\r\n          {mealsList}\r\n        </ul>\r\n      </Card>\r\n\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default AvailableMeals\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}