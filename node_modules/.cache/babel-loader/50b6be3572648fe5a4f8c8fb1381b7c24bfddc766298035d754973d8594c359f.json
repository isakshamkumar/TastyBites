{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ksaks\\\\OneDrive\\\\Desktop\\\\react_udemy\\\\after-side-effects-food-order-app\\\\src\\\\store\\\\CartProvider.js\",\n  _s = $RefreshSig$();\nimport React, { useReducer } from 'react';\nimport CartContext from './cart-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CartProvider(props) {\n  _s();\n  const defaultCartState = {\n    items: [],\n    totalAmount: 0\n  };\n  const cartReducer = (state, action) => {\n    if (action.type === 'ADD') {\n      const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n      const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n      const existingCartItem = state.items[existingCartItemIndex];\n      let updatedItems;\n      if (existingCartItem) {\n        const updatedItem = {\n          ...existingCartItem,\n          amount: existingCartItem.amount + action.item.amount\n        };\n        updatedItems = [...state.items];\n        updatedItems[existingCartItemIndex] = updatedItem;\n      } else {\n        //initially sirf updated total amount and updated items hi daal rhe thae\n        updatedItems = state.items.concat(action.item);\n      }\n      return {\n        items: updatedItems,\n        totalAmount: updatedTotalAmount\n      };\n    }\n    if (action.type === 'REMOVE') {\n      const existingCartItemIndex = state.items.findIndex(item => item.id === action.id);\n      const existingItem = state.items[existingCartItemIndex];\n      const updatedTotalAmount = state.totalAmount - existingItem.price;\n      let updatedItems;\n      if (existingItem.amount === 1) {\n        updatedItems = state.items.filter(item => item.id !== action.id);\n      } else {\n        const updatedItem = {\n          ...existingItem,\n          amount: existingItem.amount - 1\n        };\n        updatedItems = [...state.items];\n        updatedItems[existingCartItemIndex] = updatedItem;\n      }\n      return {\n        items: updatedItems,\n        totalAmount: updatedTotalAmount\n      };\n    }\n    if (action.type === 'CLEAR') {\n      return defaultCartState;\n    }\n    return defaultCartState;\n  };\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: 'ADD',\n      item: item\n    });\n  };\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: 'REMOVE',\n      id: id\n    });\n  };\n  const clearCartHandler = () => {\n    dispatchCartAction({\n      type: 'CLEAR'\n    });\n  };\n  const cartContext = {\n    // items:[], //this items is hardcoded but we want to it to change and hence change for all componenets wrapped in context\n    items: cartState.items,\n    // totalAmount:0,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler,\n    clearCart: clearCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","useReducer","CartContext","jsxDEV","_jsxDEV","CartProvider","props","_s","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","item","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updatedItems","updatedItem","concat","existingItem","filter","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","clearCartHandler","cartContext","addItem","removeItem","clearCart","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ksaks/OneDrive/Desktop/react_udemy/after-side-effects-food-order-app/src/store/CartProvider.js"],"sourcesContent":["import React, { useReducer } from 'react'\r\nimport CartContext from './cart-context'\r\n\r\nexport default function CartProvider(props) {\r\n  const defaultCartState={\r\n    items:[],\r\n    totalAmount:0\r\n  }\r\n  const cartReducer =(state, action)=>{\r\n    if(action.type==='ADD'){\r\n      const updatedTotalAmount =state.totalAmount + action.item.price * action.item.amount;\r\n      const existingCartItemIndex=state.items.findIndex((item)=> item.id===action.item.id)\r\n      const existingCartItem=state.items[existingCartItemIndex];\r\n      let updatedItems;\r\n      if(existingCartItem){\r\n        \r\n        const updatedItem={\r\n          ...existingCartItem,\r\n          amount:existingCartItem.amount+ action.item.amount\r\n        }\r\n        updatedItems=[...state.items];\r\n        updatedItems[existingCartItemIndex]=updatedItem;\r\n      }\r\n      else{\r\n  //initially sirf updated total amount and updated items hi daal rhe thae\r\n       updatedItems=state.items.concat(action.item)\r\n      }\r\n      return {\r\n        items:updatedItems,\r\n        totalAmount:updatedTotalAmount\r\n      }\r\n    }\r\n    if(action.type==='REMOVE'){\r\n      const existingCartItemIndex=state.items.findIndex((item)=> item.id===action.id)\r\n      const existingItem=state.items[existingCartItemIndex];\r\n      const updatedTotalAmount=state.totalAmount-existingItem.price;\r\n      let updatedItems;\r\n      if(existingItem.amount===1){\r\n        updatedItems=state.items.filter((item)=> item.id!==action.id)\r\n  \r\n      }\r\n      else{\r\n        const updatedItem={...existingItem,amount:existingItem.amount-1}\r\n        updatedItems=[...state.items]\r\n        updatedItems[existingCartItemIndex]=updatedItem\r\n      }\r\n      return{\r\n        items:updatedItems,\r\n        totalAmount:updatedTotalAmount\r\n      }\r\n    }\r\n    if(action.type==='CLEAR'){\r\n      return defaultCartState;\r\n      \r\n    }\r\n    return defaultCartState\r\n  }\r\n  const [cartState, dispatchCartAction]=useReducer(cartReducer,defaultCartState)\r\n    const addItemToCartHandler=(item)=>{\r\n      dispatchCartAction({type:'ADD',item:item})\r\n    }\r\n    const removeItemFromCartHandler=(id)=>{\r\n      dispatchCartAction({type:'REMOVE',id:id})\r\n    }\r\n    const clearCartHandler=()=>{\r\n      dispatchCartAction({type:'CLEAR'})\r\n    }\r\n    const cartContext ={\r\n        // items:[], //this items is hardcoded but we want to it to change and hence change for all componenets wrapped in context\r\n        items: cartState.items,\r\n        // totalAmount:0,\r\n        totalAmount:cartState.totalAmount,\r\n        addItem:addItemToCartHandler,\r\n        removeItem:removeItemFromCartHandler,\r\n        clearCart:clearCartHandler\r\n    }\r\n  return (\r\n    <CartContext.Provider value={cartContext}>\r\n        {props.children}\r\n    </CartContext.Provider>\r\n  )\r\n}\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,OAAOC,WAAW,MAAM,gBAAgB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAExC,eAAe,SAASC,YAAYA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAC1C,MAAMC,gBAAgB,GAAC;IACrBC,KAAK,EAAC,EAAE;IACRC,WAAW,EAAC;EACd,CAAC;EACD,MAAMC,WAAW,GAAEA,CAACC,KAAK,EAAEC,MAAM,KAAG;IAClC,IAAGA,MAAM,CAACC,IAAI,KAAG,KAAK,EAAC;MACrB,MAAMC,kBAAkB,GAAEH,KAAK,CAACF,WAAW,GAAGG,MAAM,CAACG,IAAI,CAACC,KAAK,GAAGJ,MAAM,CAACG,IAAI,CAACE,MAAM;MACpF,MAAMC,qBAAqB,GAACP,KAAK,CAACH,KAAK,CAACW,SAAS,CAAEJ,IAAI,IAAIA,IAAI,CAACK,EAAE,KAAGR,MAAM,CAACG,IAAI,CAACK,EAAE,CAAC;MACpF,MAAMC,gBAAgB,GAACV,KAAK,CAACH,KAAK,CAACU,qBAAqB,CAAC;MACzD,IAAII,YAAY;MAChB,IAAGD,gBAAgB,EAAC;QAElB,MAAME,WAAW,GAAC;UAChB,GAAGF,gBAAgB;UACnBJ,MAAM,EAACI,gBAAgB,CAACJ,MAAM,GAAEL,MAAM,CAACG,IAAI,CAACE;QAC9C,CAAC;QACDK,YAAY,GAAC,CAAC,GAAGX,KAAK,CAACH,KAAK,CAAC;QAC7Bc,YAAY,CAACJ,qBAAqB,CAAC,GAACK,WAAW;MACjD,CAAC,MACG;QACR;QACKD,YAAY,GAACX,KAAK,CAACH,KAAK,CAACgB,MAAM,CAACZ,MAAM,CAACG,IAAI,CAAC;MAC7C;MACA,OAAO;QACLP,KAAK,EAACc,YAAY;QAClBb,WAAW,EAACK;MACd,CAAC;IACH;IACA,IAAGF,MAAM,CAACC,IAAI,KAAG,QAAQ,EAAC;MACxB,MAAMK,qBAAqB,GAACP,KAAK,CAACH,KAAK,CAACW,SAAS,CAAEJ,IAAI,IAAIA,IAAI,CAACK,EAAE,KAAGR,MAAM,CAACQ,EAAE,CAAC;MAC/E,MAAMK,YAAY,GAACd,KAAK,CAACH,KAAK,CAACU,qBAAqB,CAAC;MACrD,MAAMJ,kBAAkB,GAACH,KAAK,CAACF,WAAW,GAACgB,YAAY,CAACT,KAAK;MAC7D,IAAIM,YAAY;MAChB,IAAGG,YAAY,CAACR,MAAM,KAAG,CAAC,EAAC;QACzBK,YAAY,GAACX,KAAK,CAACH,KAAK,CAACkB,MAAM,CAAEX,IAAI,IAAIA,IAAI,CAACK,EAAE,KAAGR,MAAM,CAACQ,EAAE,CAAC;MAE/D,CAAC,MACG;QACF,MAAMG,WAAW,GAAC;UAAC,GAAGE,YAAY;UAACR,MAAM,EAACQ,YAAY,CAACR,MAAM,GAAC;QAAC,CAAC;QAChEK,YAAY,GAAC,CAAC,GAAGX,KAAK,CAACH,KAAK,CAAC;QAC7Bc,YAAY,CAACJ,qBAAqB,CAAC,GAACK,WAAW;MACjD;MACA,OAAM;QACJf,KAAK,EAACc,YAAY;QAClBb,WAAW,EAACK;MACd,CAAC;IACH;IACA,IAAGF,MAAM,CAACC,IAAI,KAAG,OAAO,EAAC;MACvB,OAAON,gBAAgB;IAEzB;IACA,OAAOA,gBAAgB;EACzB,CAAC;EACD,MAAM,CAACoB,SAAS,EAAEC,kBAAkB,CAAC,GAAC5B,UAAU,CAACU,WAAW,EAACH,gBAAgB,CAAC;EAC5E,MAAMsB,oBAAoB,GAAEd,IAAI,IAAG;IACjCa,kBAAkB,CAAC;MAACf,IAAI,EAAC,KAAK;MAACE,IAAI,EAACA;IAAI,CAAC,CAAC;EAC5C,CAAC;EACD,MAAMe,yBAAyB,GAAEV,EAAE,IAAG;IACpCQ,kBAAkB,CAAC;MAACf,IAAI,EAAC,QAAQ;MAACO,EAAE,EAACA;IAAE,CAAC,CAAC;EAC3C,CAAC;EACD,MAAMW,gBAAgB,GAACA,CAAA,KAAI;IACzBH,kBAAkB,CAAC;MAACf,IAAI,EAAC;IAAO,CAAC,CAAC;EACpC,CAAC;EACD,MAAMmB,WAAW,GAAE;IACf;IACAxB,KAAK,EAAEmB,SAAS,CAACnB,KAAK;IACtB;IACAC,WAAW,EAACkB,SAAS,CAAClB,WAAW;IACjCwB,OAAO,EAACJ,oBAAoB;IAC5BK,UAAU,EAACJ,yBAAyB;IACpCK,SAAS,EAACJ;EACd,CAAC;EACH,oBACE5B,OAAA,CAACF,WAAW,CAACmC,QAAQ;IAACC,KAAK,EAAEL,WAAY;IAAAM,QAAA,EACpCjC,KAAK,CAACiC;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAE3B;AAACpC,EAAA,CA9EuBF,YAAY;AAAAuC,EAAA,GAAZvC,YAAY;AAAA,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}